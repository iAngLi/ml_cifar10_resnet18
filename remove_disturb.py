# -*- coding:utf-8 -*-#! python3import osfrom PIL import Imagefrom numpy import meanimport numpy as npfrom sklearn.metrics.pairwise import cosine_similarityfrom matplotlib import pyplot as pltimport matplotlib.image as mpimgfrom sklearn.decomposition import PCAdef ed(m, n):    return np.sqrt(np.sum((m - n) ** 2))def rm_disturb(image_path, out_ptah):    img = Image.open(image_path)  # 读取系统的内照片    width = img.size[0]     # 长度    height = img.size[1]    # 宽度    new_img = Image.open(image_path)    disturb_pixel = [(255, 0, 0), (0, 255, 0), (0, 0, 255),                     (0, 255, 255), (255, 0, 255), (255, 255, 0)]    for i in range(0, width):   # 遍历所有长度的点        for j in range(0, height):  # 遍历所有宽度的点            data = (img.getpixel((i, j)))    # 打印该图片的所有点            for p in disturb_pixel:                # print(ed(np.array(data), np.array(p)))                if ed(np.array(data), np.array(p)) < 30:                    if i == 0 and j == 0:                        a = np.array([img.getpixel((i+1, j)), img.getpixel((i, j+1)), img.getpixel((i+1, j+1))], dtype='int32')                    elif i == 0 and j == height-1:                        a = np.array([img.getpixel((i+1, j)), img.getpixel((i, j-1)), img.getpixel((i+1, j-1))], dtype='int32')                    elif i == width-1 and j == 0:                        a = np.array([img.getpixel((i-1, j)), img.getpixel((i, j+1)), img.getpixel((i-1, j+1))], dtype='int32')                    elif i == width-1 and j == height-1:                        a = np.array([img.getpixel((i-1, j)), img.getpixel((i, j-1)), img.getpixel((i-1, j-1))], dtype='int32')                    elif i == 0:                        a = np.array([img.getpixel((i, j+1)), img.getpixel((i, j-1)), img.getpixel((i+1, j)),                                      img.getpixel((i+1, j-1)), img.getpixel((i+1, j+1))], dtype='int32')                    elif j == 0:                        a = np.array([img.getpixel((i-1, j)), img.getpixel((i+1, j)), img.getpixel((i, j+1)),                                      img.getpixel((i+1, j+1)), img.getpixel((i-1, j+1))], dtype='int32')                    elif i == width-1:                        a = np.array([img.getpixel((i, j+1)), img.getpixel((i, j-1)), img.getpixel((i-1, j)),                                      img.getpixel((i-1, j-1)), img.getpixel((i-1, j+1))], dtype='int32')                    elif j == height-1:                        a = np.array([img.getpixel((i-1, j)), img.getpixel((i+1, j)), img.getpixel((i, j-1)),                                      img.getpixel((i+1, j-1)), img.getpixel((i-1, j-1))], dtype='int32')                    else:                        a = np.array([img.getpixel((i, j+1)), img.getpixel((i, j-1)), img.getpixel((i+1, j)),                                      img.getpixel((i-1, j)), img.getpixel((i+1, j-1)), img.getpixel((i+1, j+1)),                                      img.getpixel((i-1, j-1)), img.getpixel((i-1, j+1))], dtype='int32')                    for point in a:                        for pi in disturb_pixel:                            if ed(np.array(point), np.array(pi)) < 50:                                aim_index = np.where(a == point)[0][0]                                # print(aim_index)                                a = np.delete(a, [aim_index], axis=0)                                break                    mean_pixel = mean(a, axis=0)                    if mean_pixel[0] == mean_pixel[0]:                        mean_pixel = tuple([int(a) for a in mean_pixel])                        new_img.putpixel((i, j), mean_pixel)    new_img.save(out_ptah)    # 保存修改像素点后的图片def image_show(img):    plt.imshow(img)    plt.show()if __name__ == '__main__':    # 读取文件并进行排序    path = './data/clean/'    outpath = './data/clean_new/'    filelists = os.listdir(path)        if not os.path.exists(path):        os.mkdir(path)    if not os.path.exists(outpath):        os.mkdir(outpath)            # 预测    count = 0    for i in range(len(filelists)):        image_path = path + '/' + str(i) + '.png'        out_path = outpath + '/' + str(i) + '.png'        rm_disturb(image_path, out_path)        print(count)        count += 1